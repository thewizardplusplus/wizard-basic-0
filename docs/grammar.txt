LINE_BREAK =          ["\r"], "\n", {["\r"], "\n"};
CONSTANT_REAL =       ? /\b(\d+|(\d+.\d*)|(\d*.\d+))\b/ ?;
CONSTANT_STRING =     ? /"([^"\\]|(\\(t|n|r|"|\\)))*"/ ?;
IDENTIFIER_SIMPLE =   ? /\b[A-Za-z_]\w*\b/ ?;

expression_atom =     CONSTANT_REAL | IDENTIFIER_SIMPLE | ("(", expression, ")")
	| function_call;
expression_unary =    "not", expression_atom;
expression_mul =      expression_unary, {("*" | "/"), expression_unary};
expression_add =      expression_mul, {("+" | "-"), expression_mul};
expression_compare =  expression_add, {("<" | ">"), expression_add};
expression_equality = expression_compare, {"=", expression_compare};
expression_and =      expression_equality, {"and", expression_equality};
expression_or =       expression_and, {"or", expression_and};
expression =          expression_or;

statement_assign =    "let", IDENTIFIER_SIMPLE, "=", expression, LINE_BREAK;
statement_if =        "if", expression, "then", LINE_BREAK, statement_list,
	LINE_BREAK, "end", LINE_BREAK;
statement_label =     "label", IDENTIFIER_SIMPLE, LINE_BREAK;
statement_goto =      "go to", IDENTIFIER_SIMPLE, LINE_BREAK;
statement_define =    "define", IDENTIFIER_SIMPLE, "as", CONSTANT_STRING,
	LINE_BREAK;
statement =           statement_assign | statement_if | statement_label |
	statement_goto | statement_define | function_call;
statement_list =      statement, {statement};

function_call =       IDENTIFIER_SIMPLE, "(", [expression {",", expression}],
	")";

program =             statement_list;
