#include "StringConverterHelper.h"

namespace thewizardplusplus {
namespace utils {

STRING_CONVERTER_HELPER_FOR_NUMBER_CONSTRUCTOR_WITH_WRAPPER_IMPLIMENTATION(
	char, long int)
STRING_CONVERTER_HELPER_FOR_NUMBER_CONSTRUCTOR_WITH_WRAPPER_IMPLIMENTATION(
	signed char, long int)
STRING_CONVERTER_HELPER_FOR_NUMBER_CONSTRUCTOR_WITH_WRAPPER_IMPLIMENTATION(
	unsigned char, unsigned long int)
STRING_CONVERTER_HELPER_FOR_NUMBER_CONSTRUCTOR_IMPLIMENTATION(short int)
STRING_CONVERTER_HELPER_FOR_NUMBER_CONSTRUCTOR_IMPLIMENTATION(
	unsigned short int)
STRING_CONVERTER_HELPER_FOR_NUMBER_CONSTRUCTOR_IMPLIMENTATION(int)
STRING_CONVERTER_HELPER_FOR_NUMBER_CONSTRUCTOR_IMPLIMENTATION(unsigned int)
STRING_CONVERTER_HELPER_FOR_NUMBER_CONSTRUCTOR_IMPLIMENTATION(long int)
STRING_CONVERTER_HELPER_FOR_NUMBER_CONSTRUCTOR_IMPLIMENTATION(unsigned long int)
STRING_CONVERTER_HELPER_FOR_NUMBER_CONSTRUCTOR_IMPLIMENTATION(float)
STRING_CONVERTER_HELPER_FOR_NUMBER_CONSTRUCTOR_IMPLIMENTATION(double)
STRING_CONVERTER_HELPER_FOR_NUMBER_CONSTRUCTOR_IMPLIMENTATION(long double)

template<>
StringConverterHelper<bool>::StringConverterHelper(bool value) {
	if (value) {
		this->value = "true";
	} else {
		this->value = "false";
	}
}

}
}

using namespace thewizardplusplus::utils;

STRING_CONVERTER_HELPER_FOR_STRING_IMPLEMENTATION(const char*);
STRING_CONVERTER_HELPER_FOR_STRING_IMPLEMENTATION(std::string);
